/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Barter } from './Barter';
import {
    BarterFromJSON,
    BarterFromJSONTyped,
    BarterToJSON,
    BarterToJSONTyped,
} from './Barter';
import type { Skill } from './Skill';
import {
    SkillFromJSON,
    SkillFromJSONTyped,
    SkillToJSON,
    SkillToJSONTyped,
} from './Skill';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    karmaPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    trustScore?: number;
    /**
     * 
     * @type {Array<Skill>}
     * @memberof User
     */
    skills?: Array<Skill>;
    /**
     * 
     * @type {Array<Barter>}
     * @memberof User
     */
    sentBarters?: Array<Barter>;
    /**
     * 
     * @type {Array<Barter>}
     * @memberof User
     */
    receivedBarters?: Array<Barter>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    eduEmail?: boolean;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'email': json['email'] == null ? undefined : json['email'],
        'password': json['password'] == null ? undefined : json['password'],
        'karmaPoints': json['karmaPoints'] == null ? undefined : json['karmaPoints'],
        'trustScore': json['trustScore'] == null ? undefined : json['trustScore'],
        'skills': json['skills'] == null ? undefined : ((json['skills'] as Array<any>).map(SkillFromJSON)),
        'sentBarters': json['sentBarters'] == null ? undefined : ((json['sentBarters'] as Array<any>).map(BarterFromJSON)),
        'receivedBarters': json['receivedBarters'] == null ? undefined : ((json['receivedBarters'] as Array<any>).map(BarterFromJSON)),
        'eduEmail': json['eduEmail'] == null ? undefined : json['eduEmail'],
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'email': value['email'],
        'password': value['password'],
        'karmaPoints': value['karmaPoints'],
        'trustScore': value['trustScore'],
        'skills': value['skills'] == null ? undefined : ((value['skills'] as Array<any>).map(SkillToJSON)),
        'sentBarters': value['sentBarters'] == null ? undefined : ((value['sentBarters'] as Array<any>).map(BarterToJSON)),
        'receivedBarters': value['receivedBarters'] == null ? undefined : ((value['receivedBarters'] as Array<any>).map(BarterToJSON)),
        'eduEmail': value['eduEmail'],
    };
}

