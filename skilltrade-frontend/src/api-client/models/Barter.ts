/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface Barter
 */
export interface Barter {
    /**
     * 
     * @type {number}
     * @memberof Barter
     */
    id?: number;
    /**
     * 
     * @type {User}
     * @memberof Barter
     */
    sender?: User;
    /**
     * 
     * @type {User}
     * @memberof Barter
     */
    receiver?: User;
    /**
     * 
     * @type {string}
     * @memberof Barter
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Barter
     */
    offeredSkill?: string;
    /**
     * 
     * @type {string}
     * @memberof Barter
     */
    requestedSkill?: string;
    /**
     * 
     * @type {number}
     * @memberof Barter
     */
    senderEstimatedHours?: number;
    /**
     * 
     * @type {number}
     * @memberof Barter
     */
    receiverEstimatedHours?: number;
    /**
     * 
     * @type {string}
     * @memberof Barter
     */
    status?: string;
    /**
     * 
     * @type {Date}
     * @memberof Barter
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Barter
     */
    completedAt?: Date;
}

/**
 * Check if a given object implements the Barter interface.
 */
export function instanceOfBarter(value: object): value is Barter {
    return true;
}

export function BarterFromJSON(json: any): Barter {
    return BarterFromJSONTyped(json, false);
}

export function BarterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Barter {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'sender': json['sender'] == null ? undefined : UserFromJSON(json['sender']),
        'receiver': json['receiver'] == null ? undefined : UserFromJSON(json['receiver']),
        'description': json['description'] == null ? undefined : json['description'],
        'offeredSkill': json['offeredSkill'] == null ? undefined : json['offeredSkill'],
        'requestedSkill': json['requestedSkill'] == null ? undefined : json['requestedSkill'],
        'senderEstimatedHours': json['senderEstimatedHours'] == null ? undefined : json['senderEstimatedHours'],
        'receiverEstimatedHours': json['receiverEstimatedHours'] == null ? undefined : json['receiverEstimatedHours'],
        'status': json['status'] == null ? undefined : json['status'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'completedAt': json['completedAt'] == null ? undefined : (new Date(json['completedAt'])),
    };
}

export function BarterToJSON(json: any): Barter {
    return BarterToJSONTyped(json, false);
}

export function BarterToJSONTyped(value?: Barter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'sender': UserToJSON(value['sender']),
        'receiver': UserToJSON(value['receiver']),
        'description': value['description'],
        'offeredSkill': value['offeredSkill'],
        'requestedSkill': value['requestedSkill'],
        'senderEstimatedHours': value['senderEstimatedHours'],
        'receiverEstimatedHours': value['receiverEstimatedHours'],
        'status': value['status'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'completedAt': value['completedAt'] == null ? undefined : ((value['completedAt']).toISOString()),
    };
}

