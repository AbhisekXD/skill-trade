/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Barter,
  BarterRequestDTO,
} from '../models/index';
import {
    BarterFromJSON,
    BarterToJSON,
    BarterRequestDTOFromJSON,
    BarterRequestDTOToJSON,
} from '../models/index';

export interface CompleteRequest {
    id: number;
}

export interface SendBarterRequestRequest {
    barterRequestDTO: BarterRequestDTO;
}

/**
 * 
 */
export class BarterControllerApi extends runtime.BaseAPI {

    /**
     */
    async completeRaw(requestParameters: CompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/barter/complete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complete(requestParameters: CompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.completeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async myBartersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Barter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/barter/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BarterFromJSON));
    }

    /**
     */
    async myBarters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Barter>> {
        const response = await this.myBartersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sendBarterRequestRaw(requestParameters: SendBarterRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['barterRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'barterRequestDTO',
                'Required parameter "barterRequestDTO" was null or undefined when calling sendBarterRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/barter/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BarterRequestDTOToJSON(requestParameters['barterRequestDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sendBarterRequest(requestParameters: SendBarterRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendBarterRequestRaw(requestParameters, initOverrides);
    }

}
